
name: orthanc-stack

services:
  traefik:
    image: traefik:v3.1
    command:
      - "--api.dashboard=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_letsencrypt:/letsencrypt"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # Optional: protect dashboard behind basic auth
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_USERS}"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    sysctls:
      net.core.somaxconn: 1024

  orthanc:
    # Includes official plugins (PostgreSQL, etc.). Vendor name may evolve;
    # this tag is widely used as of 2025.
    image: orthancteam/orthanc-plugins:24.10
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Pass-through so orthanc.json can read from env
      ORTHANC__NAME: ${ORTHANC_NAME}
      ORTHANC__DICOM_AET: ${ORTHANC_AET}
      ORTHANC__DICOM_PORT: "4242"
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - orthanc_storage:/var/lib/orthanc
      - ./orthanc/orthanc.json:/etc/orthanc/orthanc.json:ro
      - orthanc_plugins:/usr/share/orthanc/plugins
    restart: unless-stopped
    ports:
      # DICOM C-STORE SCP (unencrypted). Restrict via firewall/VPN.
      - "4242:4242"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.orthanc.rule=Host(`${ORTHANC_HOST}`)"
      - "traefik.http.routers.orthanc.entrypoints=websecure"
      - "traefik.http.routers.orthanc.tls.certresolver=le"
      - "traefik.http.services.orthanc.loadbalancer.server.port=8042"

  # Nightly logical backups (dump) of PostgreSQL
  pg_backup:
    image: prodrigestivill/postgres-backup-local:16
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SCHEDULE: "${PG_BACKUP_CRON}"   # e.g., 0 2 * * *
      BACKUP_DIR: /backups
      BACKUP_KEEP_DAYS: "${PG_BACKUP_KEEP_DAYS}"
      BACKUP_KEEP_WEEKS: "${PG_BACKUP_KEEP_WEEKS}"
      BACKUP_KEEP_MONTHS: "${PG_BACKUP_KEEP_MONTHS}"
      POSTGRES_EXTRA_OPTS: "--format=custom --verbose"
    volumes:
      - pg_backups:/backups
    restart: unless-stopped

  # Nightly snapshot of Orthanc storage using restic (to S3/MinIO/SFTP/local)
  storage_backup:
    image: restic/restic:0.16
    depends_on:
      orthanc:
        condition: service_started
    environment:
      RESTIC_REPOSITORY: ${RESTIC_REPOSITORY}
      RESTIC_PASSWORD: ${RESTIC_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      RESTIC_BACKUP_SOURCES: /data
      RESTIC_BACKUP_ARGS: "--verbose --exclude-caches"
      CRON_SCHEDULE: "${RESTIC_CRON}"   # e.g., 0 3 * * *
    volumes:
      - orthanc_storage:/data:ro
      - restic_cache:/root/.cache/restic
    entrypoint: |
      sh -c '
        echo "$CRON_SCHEDULE /usr/bin/restic backup $RESTIC_BACKUP_SOURCES $RESTIC_BACKUP_ARGS && /usr/bin/restic forget --keep-daily ${RESTIC_KEEP_DAILY} --keep-weekly ${RESTIC_KEEP_WEEKLY} --keep-monthly ${RESTIC_KEEP_MONTHLY} --prune" > /etc/crontabs/root && crond -f -l 8
      '
    restart: unless-stopped

  # Optional: exposes simple /health endpoints for external monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    command: ["--enable_load_reader=true"]
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped

volumes:
  pg_data:
  orthanc_storage:
  orthanc_plugins:
  pg_backups:
  restic_cache:
  traefik_letsencrypt:
